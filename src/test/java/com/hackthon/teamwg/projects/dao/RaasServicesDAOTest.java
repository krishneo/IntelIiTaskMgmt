package com.hackthon.teamwg.projects.dao;

import com.hackthon.teamwg.projects.dao.RaasServicesDAO.*;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import org.junit.Test;

import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.ArrayListHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.log4j.Logger;

import com.hackthon.teamwg.projects.dto.RaasGenericCountDTO;
import com.hackthon.teamwg.projects.dto.RaasGroupsDTO;
import com.hackthon.teamwg.projects.dto.RaasTasksDTO;
import com.hackthon.teamwg.projects.dto.RaasUsersDTO;
import com.hackthon.teamwg.projects.utils.CommonUtils;
import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

public class RaasServicesDAOTest {

	String rep[] = { "WG", "CPNI", "ST", "CMC" };

	@Test
	public void type() throws Exception {
		// TODO auto-generated by JUnit Helper.
		assertThat(RaasServicesDAO.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		// TODO auto-generated by JUnit Helper.
		RaasServicesDAO target = new RaasServicesDAO();
		assertThat(target, notNullValue());
	}

	@Test
	public void getDataSource_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		RaasServicesDAO target = new RaasServicesDAO();
		DataSource actual = target.getDataSource();
		assertNotNull(actual);
	}

	@Test
	public void getUser_A$String() throws Exception {
		// TODO auto-generated by JUnit Helper.
		RaasServicesDAO target = new RaasServicesDAO();
		String loginId = "Prakash";
		RaasUsersDTO actual = target.getUser(loginId);
		assertNotNull(actual);
	}

	@Test
	public void createNewTask_A$String$String$String$String$String()
			throws Exception {
		// TODO auto-generated by JUnit Helper.

		for (int i = 0; i < 5; i++) {

			RaasServicesDAO target = new RaasServicesDAO();
			String taskKey = "TEST" + System.currentTimeMillis();
			String groupName = rep[CommonUtils.getRandomNumber(0, 4)];
			String priority = String
					.valueOf(CommonUtils.getRandomNumber(1, 10));
			int weit = CommonUtils.getRandomNumber(1, 10);
			String weightage = String.valueOf(weit);
			String sla = String.valueOf((int) (weit
					* CommonUtils.getRandomNumber(1, 3) * 1.414));
			boolean actual = target.createNewTask(taskKey, groupName, priority,
					weightage, sla);
			assertNotNull(actual);

		}
	}

}
